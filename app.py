# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ streamlit
import streamlit as st
bot_url = "https://t.me/official_studobot"
ipynb_url = "https://github.com/rtccreator/data_hse_project2023/blob/main/main.ipynb"
st.title("–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç / –ù–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö / –í–æ–ª–æ–±—É–µ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤")
st.header("–í —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?")
st.subheader("\n–≠—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\n\
1) –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏,\n\
2) –£–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞,\n\
3) –ü—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä—É –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ e-mail –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏,\n\
4) –£–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –∫–∞–∫—É—é-–ª–∏–±–æ –¥–∞—Ç—É –≤ 2022 –≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –ë–∞–∑–µ–ª—å –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö ML-–º–æ–¥–µ–ª–∏,\n\
5) –†–µ—à–∞—Ç—å –°–õ–ê–£ –º–µ—Ç–æ–¥–æ–º –ö—Ä–∞–º–µ—Ä–∞\n\n")

st.markdown(f'''<a href={bot_url}><button style="background-color:Red;color:White;border-radius:5px;padding:10px;margin:15px 0;border-color:Red;">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞</button></a>''',
unsafe_allow_html=True)
st.header("\n\n–í–µ—Å—å –∫–æ–¥:\n")
st.markdown(f'''<a href={ipynb_url}><button style="background-color:Green;color:White;border-radius:5px;padding:10px;margin:15px 0;border-color:Green;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–æ—É—Ç–±—É–∫–∞ (Github)</button></a>''',
unsafe_allow_html=True)
#–î–∞–ª–µ–µ –∫–æ–¥ –∏ –µ–≥–æ —Ä–∞–±–æ—Ç–∞
####################################

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image
from io import BytesIO
import io
import requests

bot_inst = Bot(st.secrets.tg.TG_TOKEN)
dp_inst = Dispatcher(bot_inst)

@dp_inst.message_handler(commands=['start'])
async def init_command(message: types.Message):
    reply_kb = InlineKeyboardMarkup()
    functions = [("üìÜ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", 'schedule'), ("üá®üá≥üá∑üá∫ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å —é–∞–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", 'yuan'),
                 ("üóÉÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CSV-—Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", 'contacts'), ("‚õÖ –£–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤ –ë–∞–∑–µ–ª–µ", 'weather'), ("üßÆ –†–µ—à–∏—Ç—å –°–õ–ê–£ –ø–æ –ö—Ä–∞–º–µ—Ä—É", 'solve')]
    for item_text, item_callback in functions:
        reply_kb.add(InlineKeyboardButton(item_text, callback_data=item_callback))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_kb)

@dp_inst.callback_query_handler(lambda query: True)
async def process_query(callback_query: types.CallbackQuery):
    callback_id = callback_query.from_user.id
    callback_data = callback_query.data
    error_txt = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    if callback_data == 'schedule':
        await bot_inst.send_message(callback_id, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
    elif callback_data == 'yuan':
        await bot_inst.send_message(callback_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
        try:
            yuan_val, yuan_img = get_yuan()
            await bot_inst.send_message(callback_id, yuan_val)
            img_io = io.BytesIO()
            img_io.name = 'yuan.png'
            image.save(img_io, 'PNG')
            img_io.seek(0)
            await bot_inst.send_photo(callback_id, photo=img_io)
        except Exception:
            await bot_inst.send_message(callback_id, error_txt)
    elif callback_data == 'contacts':
        await bot_inst.send_message(callback_id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª CSV —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ e-mail'–∞–º–∏:")
    elif callback_data == 'weather':
        await bot_inst.send_message(callback_id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ù–æ–º–µ—Ä –¥–Ω—è <–ø—Ä–æ–±–µ–ª> –ú–µ—Å—è—Ü" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã:')
    elif callback_data == 'solve':
        await bot_inst.send_message(callback_id, "–í–≤–µ–¥–∏—Ç–µ –°–õ–ê–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [[2,5,-1,10], [1,-1,3,5], [3,2,4,4]]:")

@dp_inst.message_handler()
async def process_message(message: types.Message):
    message_text = message.text
    try:
        if message_text.isdigit():
            group_id = get_groups(message_text)
            schedule, advice = get_schedule(group_id)
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}\n–°–æ–≤–µ—Ç—ã: {advice}")
        elif ".csv" in message_text:
            file_info = await bot_inst.get_file(message.document.file_id)
            downloaded_file = await bot_inst.download_file(file_info.file_path)
            processed_data = check_data(downloaded_file)
            await bot_inst.send_document(message.from_user.id, ("contacts.csv", processed_data))
        elif len(message_text.split(" ")) == 2:
            weather_report = forecast_weather(message_text)
            await message.answer(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ë–∞–∑–µ–ª–µ: {weather_report}")
        else:
            slau = eval(message_text)
            result = solve_cramer(slau)
            await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

###—Ñ—É–Ω–∫—Ü–∏–∏

####–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def main():
    st.title("STODOBOT Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    st.write("–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –º–æ–¥—É–ª—è–º - —Å–º. Jupyter Notebook!")

async def start_polling():
    await dp_inst.start_polling()
####–∫–æ–Ω–µ—Ü

def get_an_advice(prompt_subj):
    openai.api_key = st.secrets.main.GPT_TOKEN
    #–≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç - –¥–ª—è —Ä–∞–±–æ—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º api, –≥–¥–µ –ª–∏–º–∏—Ç
    #–Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω. –≤–ø–æ–ª–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É

    subj_tokens = int(len(prompt_subj.split(",")) * 50)

    #—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –¥–ª–∏–Ω–µ –∫–æ–ª-–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å
    preprompt = f"–ü—Ä–µ–¥–ª–æ–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫ \
    –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è —Å—Ç—É–¥–µ–Ω—Ç—É –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º: \
    –í –æ–±—â–µ–π —Å—É–º–º–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è –º–∞–∫—Å–∏–º—É–º {subj_tokens} —Å–∏–º–≤–æ–ª–æ–≤! –û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ!"
    #print(preprompt)

    max_tokens = subj_tokens + 100
    #–¥–∞–¥–∏–º –º–æ–¥–µ–ª–∏ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç

    response = openai.ChatCompletion.create(
      model='gpt-3.5-turbo', #–≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å 3.5 turbo
      messages=[
            {'role': 'system', 'content': preprompt},
            {'role': 'user', 'content': prompt_subj},
      ],
        max_tokens = max_tokens
    )
    
    return response['choices'][0]['message']['content']

def get_groups(query):
    url = f"https://ruz.fa.ru/api/search?term={query}&type=group"
    response = requests.get(url)
    grps_raw = response.json()
    #–∑–¥–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ json-–æ—Ç–≤–µ—Ç—É –∏ –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è id –∏ label,
    #–æ—Ç—Å–µ–∫–∞—è –Ω–µ–Ω—É–∂–Ω–æ–µ, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –Ω–µ–Ω—É–∂–Ω–æ–µ - —ç—Ç–æ —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –≤ label
    #–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø, —á—Ç–æ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
    res = [[grps_raw[i]['id'], 
            grps_raw[i]['label'].split(";")] for i in range(len(grps_raw)) if len(grps_raw) > 0 and len(grps_raw[i]['label'].split(";")) == 1]
    
    return res

def get_schedule(group_id, date):
    #–æ–±—Ä–∞—â–∞–µ–º—Å—è –ø–æ id –∏ –¥–∞—Ç–µ, –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ –∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–≤–Ω—ã
    url = f"https://ruz.fa.ru/api/schedule/group/{group_id}?start={date}&finish={date}&lng=1"
    response = requests.get(url)
    rasp_raw = response.json()
    #–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    res = [[rasp_raw[i]['discipline'],
            rasp_raw[i]['beginLesson'],
            rasp_raw[i]['endLesson']] for i in range(len(rasp_raw)) if len(rasp_raw) > 0]
    
    res_final = []
    for i in res:
        if i not in res_final:
            res_final.append(i) #–∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            
    all_subj_prompt = ""
    for i in tmrw_schedule:
        if i[0] not in all_subj_prompt:
            all_subj_prompt += f"{i[0]}, "
        
    return res_final, get_an_advice(all_subj_prompt)

####

def get_yuan():
    driver = webdriver.Chrome()
    driver.get('https://www.investing.com/currencies/cny-rub-technical')
    time.sleep(2)
    cookie_button = driver.find_elements(By.ID, 'onetrust-accept-btn-handler')
    if len(cookie_button) > 0:
        cookie_button[0].click() #—ç—Ç–æ –º—ã –Ω–∞–∂–∏–º–∞–µ–º "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –Ω–∞ –∫—É–∫–∏-–±–∞–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    data_time_list_inv = [300, 1800, 86400, 'week', 'month']
    data_inv = []
    for i in data_time_list_inv:
        time.sleep(1)
        #–Ω–µ–º–Ω–æ–≥–æ –∂–¥–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ li —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-period
        driver.find_element(By.CSS_SELECTOR, f"li[data-period=\"{i}\"] > a").click()
        time.sleep(1)
        #–∏—Å–∫–æ–º–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ div —Å —ç—Ç–∏–º id:
        target_div_inv = driver.find_element(By.ID, 'techStudiesInnerWrap')
        data_inv.append(list(map(lambda element: element.text, target_div_inv.find_elements(By.TAG_NAME, 'div'))))
        #–ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ div–∞ –¥–ª—è 5 –º–∏–Ω—É—Ç, –ø–æ–ª—É—á–∞—Å–∞, –¥–Ω—è, –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü–∞
    
    driver.get('https://www.tradingview.com/symbols/CNYRUB/technicals/')
    data_time_list_tdv = ['5m', '30m', '1D', '1W', '1M']
    time.sleep(2)
    data_tdv = []
    for i in data_time_list_tdv:
        time.sleep(1)
        #–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å –ò–Ω–≤–µ—Å—Ç–∏–Ω–≥–æ–º, —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å –∏—â–µ–º –∫–Ω–æ–ø–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º
        #–≤ id –∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–º —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
        driver.find_element(By.CSS_SELECTOR, f"button[id=\"{i}\"]").click()
        time.sleep(1)
        data_tdv.append(driver.find_element(By.CLASS_NAME, 'countersWrapper-kg4MJrFB').text)
        #–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ\

    driver.quit()
    
    #–ø—Ä–∏—á–µ—Å—ã–≤–∞–µ–º, —É–±–∏—Ä–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
    investing_data_clean = []
    for i in data_inv:
        for j in i:
            j = j.replace("\n", "").split(":")
            investing_data_clean.append(j)

    tradingview_data_clean = [s.split('\n') for s in data_tdv]
    time_periods = ['5 min', '30 min', 'day', 'week', 'month']
    inv_data_pd = [investing_data_clean[i:i + 3] for i in range(0, len(investing_data_clean), 3)] 
    inv_for_pd_final = list(map(list, zip(*inv_data_pd))) #–ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Å–ø–∏—Å–æ–∫
    df = pd.DataFrame(inv_for_pd_final, columns=time_periods)
    #–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ dataframe —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –Ω–∞—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    final_yuan_dict = df.to_dict()

    c = 0
    for k, v in final_yuan_dict.items():
        final_yuan_dict[time_periods[c]][3] = tradingview_data_clean[c]
        c += 1
        
    driver = webdriver.Chrome()
    driver.get('https://www.profinance.ru/charts/cnyrub/lc11')
    time.sleep(2)
    driver.find_element(By.ID, 'chart_button_plus').click() #–Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –º–∞—Å—à—Ç–∞–±
    time.sleep(2)
    img_elem = driver.find_element(By.ID, 'chart_img')
    img_elem_src = img_elem.get_attribute('src')
    response = requests.get(img_elem_src) #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.open(BytesIO(response.content)) #–ø–æ–ª—É—á–∞–µ–º –Ω–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    driver.quit()
    
    return final_yuan_dict, img

####

def check_data(file):
    df = pd.read_csv(file)
    df
    #–æ–±—Ä–∞—â–∞—è—Å—å –∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º, —Å–¥–µ–ª–∞–µ–º –º–∞—Å–∫–∏
    phone_mask = re.compile(r'^\+7\d{10}$') #—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX
    email_mask = re.compile(r'^[\w\.-]+@[\w\.-]+\.\w+$') #–±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–π–ª–∞

    def check_phone(phone):
        if phone_mask.match(phone):
            return True
        else:
            return False

    def check_email(email):
        if email_mask.match(email):
            return True
        else:
            return False
    #—ç—Ç–∏ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –ø—Ä–∏–º–µ–Ω–∏–º –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å —Å—Ç–æ–ª–±—Ü—ã –∏ —Å–¥–µ–ª–∞–µ–º –¥–≤–∞ –Ω–æ–≤—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    #—Ç–∏–ø—ã –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –∏–Ω–∞—á–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é—Ç
    df['valid_phone'] = df['phone'].astype(str).apply(check_phone)
    df['valid_email'] = df['email'].astype(str).apply(check_email)

    valid_df = df[df['valid_phone'] & df['valid_email']] #–æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –æ—à–∏–±–æ–∫

    return valid_df

####

def forecast_weather(date):
    if len(date.split(" ")) == 2:
        date += " 2022"
        #–¥–æ–±–∞–≤–ª—è–µ–º 2022, —Ç.–∫. –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–º—É –≥–æ–¥—É
        #–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime
        date = pd.to_datetime(date, format="%d %B %Y", dayfirst=True)
        date_sql = date.strftime('%Y-%m-%d')
        
        with sqlite3.connect('db_ml_res.db') as sql_conn:
            print(date_sql)
            res = pd.read_sql_query(f"SELECT * FROM weather_data WHERE date = '{date_sql} 00:00:00'", sql_conn)
        return [date_sql, f"{round(res['prediction'][0], 1)} C", f"{round(res['actual'][0], 1)} C"]
    else:
        return "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–µ–Ω—å –º–µ—Å—è—Ü"

def solve_cramer(slau):
    M = sp.Matrix(slau)
    M_coeff = M[:, :-1]
    M_const = M[:, -1]
    res = []
    
    if M_coeff.cols != M_coeff.rows:
        return '–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π, –ø–æ –ö—Ä–∞–º–µ—Ä—É –µ–µ –Ω–µ —Ä–µ—à–∏—Ç—å, \
–∏—Å–ø–æ–ª—å—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞'
    elif M_coeff.det() == 0:
        return '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–≤–µ–Ω 0, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, \
—á—Ç–æ –Ω–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è!'
    else:
        for i in range(M_coeff.cols):
            M_temp = M_coeff.copy()
            M_temp[:, i] = M_const 
            #–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            res.append(M_temp.det()/M_coeff.det())
            #–¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            #–ø–æ—Å–ª–µ –¥–µ–ª–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ –Ω–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            
    return res

###–∫–æ–Ω–µ—Ü
    
if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(asyncio.gather(main(), start_polling()))


#END################################
